// Code generated by 'gots'. DO NOT EDIT.

// From codersdk/generics.go
interface Fields<C extends Comparable, A extends any, T extends Custom, S extends Single> {
    comparable: C;
    any: A;
    custom: T;
    again: T;
    single_constraint: S;
}

// From codersdk/generics.go
interface UnusedField<C extends Comparable, A extends any, T extends Custom, S extends Single> {
}

// From codersdk/generics.go
interface BasicGeneric<A extends any> {
    Val: A;
}

// From codersdk/generics.go
interface Complex<C extends Comparable, S extends Single, T extends Custom> {
    dynamic: Fields<C, boolean, string, S>;
    order: FieldsDiffOrder<C, string, S, T>;
    comparable: C;
    single: S;
    static: Static;
}

// From codersdk/generics.go
type Custom = string | boolean | number | number | string[] | (number | null);

// From codersdk/generics.go
interface FieldsDiffOrder<A extends any, C extends Comparable, S extends Single, T extends Custom> {
    Fields: Fields<C, A, T, S>;
}

// From codersdk/generics.go
interface Static {
    // this is likely an enum in an external package "time.Duration"
    static: Fields<string, number, number, string>;
}

type Comparable = string | number | boolean;

// From codersdk/generics.go
interface UseUnusedAlias {
    Val: UnusedGeneric<UnusedGeneric<number>>;
}

// From codersdk/generics.go
interface UseUnused {
    Val: UnusedGeneric<number>;
}

// From codersdk/generics.go
interface UseUnusedWithGen<T extends any> {
    Val: UnusedGeneric<T>;
}

// From codersdk/generics.go
interface Dynamic<A extends any, S extends Single> {
    dynamic: Fields<boolean, A, string, S>;
    comparable: boolean | null;
}

// From codersdk/generics.go
type Single = string;

// From codersdk/generics.go
interface UnusedGeneric<B extends any> {
}
